# .github/workflows/ci.yml
# ダイエットTODOアプリケーション - 初期環境構築用CI/CD設定
# Windows(WSL2なし)とMac環境の両方で動作確認可能な基本設定
name: Diet TODO App Initial Setup

# ワークフローを実行するタイミングの設定
# mainとdevelopブランチへのプッシュ時、またはプルリクエスト時に実行
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# 実行する処理（ジョブ）の定義
jobs:
  # フロントエンドの基本チェック（Next.js + TypeScript）
  frontend-check:
    # GitHub Actionsが提供する仮想環境（Ubuntu）を使用
    runs-on: ubuntu-latest
    # 作業ディレクトリをfrontendフォルダに設定
    defaults:
      run:
        working-directory: ./frontend

    steps:
      # ステップ1: リポジトリのコードを取得
      - name: チェックアウト
        uses: actions/checkout@v3

      # ステップ2: Node.jsのセットアップ
      # Windows/Macどちらの環境でも同じバージョンを使用
      - name: Node.jsセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: "20" # Node.jsのバージョンを18に固定
          cache: "npm" # パッケージのキャッシュを有効化
          cache-dependency-path: "./frontend/package-lock.json"

      # ステップ3: 依存パッケージのインストール
      - name: パッケージインストール
        run: npm ci # クリーンインストールを実行
        continue-on-error: true # エラーが出ても続行（初期設定段階のため）

      # ステップ4: プロジェクトの基本的なビルドチェック
      - name: ビルドテスト
        run: npm run build
        continue-on-error: true # エラーが出ても続行（初期設定段階のため）

  # バックエンドの基本チェック（Django）
  backend-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      # ステップ1: リポジトリのコードを取得
      - name: チェックアウト
        uses: actions/checkout@v3

      # ステップ2: Pythonのセットアップ
      # Windows/Macどちらの環境でも同じバージョンを使用
      - name: Pythonセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: "3.13" # Pythonのバージョンを3.13に固定
          cache: "pip" # パッケージのキャッシュを有効化

      # ステップ3: 依存パッケージのインストール
      - name: パッケージインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: true # エラーが出ても続行（初期設定段階のため）

      # ステップ4: Djangoプロジェクトの基本チェック
      - name: Django構成チェック
        run: python manage.py check
        continue-on-error: true # エラーが出ても続行（初期設定段階のため）

  # Dockerの基本チェック
  docker-check:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリのコードを取得
      - name: チェックアウト
        uses: actions/checkout@v3

      # ステップ2: Dockerの基本ビルドチェック
      - name: Dockerビルドテスト
        run: docker compose build
        continue-on-error: true # エラーが出ても続行（初期設定段階のため）
